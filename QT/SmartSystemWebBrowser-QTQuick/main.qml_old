import QtQuick 2.0
import QtQuick.Controls 1.2
import QtQuick.Window 2.2
import QtWebKit 3.0
import QtWebEngine 1.0

ApplicationWindow {
    id: application
    property double startTime: new Date().getTime()
    title: qsTr("Smart System")
    //visibility: "FullScreen"
    visibility: "Maximized"
    width: 800
    height: 480
    color: "#00000000"
    maximumWidth: 800
    maximumHeight: 480
    visible: false
    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint
    //flags: Qt.SplashScreen
    //    menuBar: MenuBar {
    //        Menu {
    //            title: qsTr("&File")
    //            MenuItem {
    //                text: qsTr("&Open")
    //                onTriggered: messageDialog.show(qsTr("Open action triggered"));
    //            }
    //            MenuItem {
    //                text: qsTr("E&xit")
    //                onTriggered: Qt.quit();
    //            }
    //        }
    //    }
/* as some performance issue in webview while in raspberry pi I am usng out of out of box browser
  to solver performance issue we need to enable GL Driver
 */
    ScrollView {
        id: webviewScroll
        width: parent.width
        height: parent.height
        visible: false
        WebView {
            id: webview
            interactive: false
            //url: "http://127.0.0.1:8080/MySmartHome-New"
            //url:"http://www.google.com"
            url: configuration.url
            anchors.fill: parent
            MouseArea {
                anchors.fill: parent
                propagateComposedEvents:true
                onClicked: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
                onPressed: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
                onReleased: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
                onDoubleClicked: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
                onPositionChanged: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
                onPressAndHold: {
                    startTime=new Date().getTime()
                    mouse.accepted = false
                }
            }
        }
    }

    Item {
        Timer {
            interval: 5000; running: true; repeat: true
            onTriggered: {
                time.text=startTime.toString();
                if(new Date().getTime()-startTime > interval && parent.visible)
                {
                    photoHelper.next
                    photoViewer.update()
                    time.text=new Date().getTime().toString() + "hmm";
                    hideWebviewScrol()
                    showPhotoViewer()
                }
            }
        }

        Text { id: time }
    }

    Image {
        id: photoViewer
        width: parent.width
        height: parent.height
        visible: false
        source: "file://" + photoHelper.imagePath
        MouseArea {
            anchors.fill: parent
            propagateComposedEvents:true
            onClicked: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
            onPressed: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
            onReleased: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
            onDoubleClicked: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
            onPositionChanged: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
            onPressAndHold: {
                hidePhotoViewer()
                showWebviewScrol()
                startTime=new Date().getTime()
                mouse.accepted = false
            }
        }
    }
    function hidePhotoViewer()
    {
        photoViewer.visible=false
    }
    function showPhotoViewer()
    {
        photoViewer.visible=true
    }
    function hideWebviewScrol(){
        webviewScroll.visible=false
    }
    function showWebviewScrol(){
        webviewScroll.visible=true
    }

    property var splashWindow: Splash {
        onTimeout: application.visible = true,showWebviewScrol()
    }
}
